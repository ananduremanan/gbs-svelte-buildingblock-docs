<script>
	import Grid from './Grid.svelte'
</script>

### Grid

Grids are powerful tools for organizing, visualizing, and interacting with tabular data in software applications.


```svelte
<script lang="ts">
	import { onMount } from 'svelte';
	import { Grid } from '@grampro/svelte-block';
	import ImageAction from '$lib/ImageAction.svelte';

	const gitDataColumns: any[] = [
		{ field: 'id', width: '200', textAlign: 'Right', filter: true },
		{
			field: 'imgUrl',
			width: '200',
			textAlign: 'Right',
			template: ImageAction,
			showTemplateInExport: true
		},
		{ field: 'userName', width: '100', filter: true },
		{ field: 'repo', width: '100', textAlign: 'Right' },
		{ field: 'repoUrl', headerText: 'Repo URL', width: '200' },
		{ field: 'Grid Action', template: ActionButton }
	];

	const getData = async () => {
		let dataArray = [];
		try {
			const res = await fetch(
				'https://raw.githubusercontent.com/json-iterator/test-data/master/large-file.json'
			);
			const data = await res.json();
			if (data) {
				dataArray = data.map((item: any) => {
					return {
						id: item.id,
						userName: item.actor.login,
						repo: item.repo.name,
						repoUrl: item.repo.url,
						imgUrl: item.actor.avatar_url
					};
				});
			}

			return dataArray;
		} catch (error) {
			console.error(error);
		}
	};

	let gitData: any[] = [];

	onMount(async () => {
		gitData = await getData();
	});
</script>

<div class="flex flex-col gap-4 px-20 py-8">
		<Grid
			columns={gitDataColumns}
			dataSource={gitData}
			pageSettings={{ pageNumber: 10 }}
			enableSearch
			enablePdfExport
			pdfName="win-data"
		/>
</div>
```

#### Sample

<iframe src="https://grid-sample-beta.netlify.app/" width="100%" height="650" frameborder="0"></iframe>


#### Props

| Property                       | Type        | Description                                           		|
| ------------------------------ | ----------- | -----------------------------------------------------------|
| dataSource                     | any[]       | The data source for the grid.                         		|
| columns                        | any[]       | Configuration for the columns in the grid.            		|
| pageSettings                   | PageSettingsProps | Configuration for the pagination settings.       	|
| enableSearch                   | boolean     | Determines whether search functionality is enabled.   		|
| lazy                           | boolean     | Determines whether lazy loading is enabled.           		|
| enableExcelExport              | boolean     | Enables or disables Excel export functionality.       		|
| excelName                      | string      | The name of the Excel file when exported.             		|
| enablePdfExport                | boolean     | Enables or disables PDF export functionality.         		|
| pdfName                        | string      | The name of the PDF file when exported.               		|
| gridContainerClass             | string      | Additional CSS class for styling the grid container.  		|
| gridButtonClass                | string      | Additional CSS class for styling grid buttons.        		|
| gridHeaderClass                | string      | Additional CSS class for styling grid headers.        		|
| gridGlobalSearchButtonClass    | string      | Additional CSS class for styling the global search button. |
| gridPaginationButtonClass      | string      | Additional CSS class for styling pagination buttons.       |

#### Adding Filter To Columns

```svelte
  const columns = [
    { field: "name", width: "100", headerText: "Name", filter: true }, // Add filter: true
    { field: "place", headerText: "Place", width: "200" },
  ];
```
#### It's Beta Time

Beta Features for grid(May have bugs)(Check the latest beta version [Here](https://www.npmjs.com/package/@grampro/svelte-block/v/0.0.29-4-beta?activeTab=versions))

#### Grid rows are now editable!!!

Grid rows can be edit now (Only Add New Row Feature is Implemented).

Example

```svelte
<script>
	import { Grid } from '@grampro/svelte-block';
	import { dataSource } from '$lib/dataSource';

	const columns = [
		{ field: 'OrderID', textAlign: 'Right', type: 'number', isPrimary: true },
		{ field: 'ShipCountry', editable: true },
		{ field: 'ShipAddress' },
		{ field: 'ShipName' },
		{ field: 'ShipCity' },
		{ field: 'ShipRegion' },
		{ field: 'ShipPostalCode' },
		{ field: 'OrderDate', type: 'date' },
		{ field: 'Verified', type: 'boolean' }
	];
</script>

<div class="mx-8 mt-8 max-sm:mx-4">
	<Grid
		{columns}
		{dataSource}
		pageSettings={{ pageNumber: 10 }}
		enableSearch
		enablePdfExport
		enableExcelExport
		enableEditingBox
	/>
</div>

```

Editing Grid can be tricky sometimes when you handle different types on inputs, in such cases add type key in the columns array.

#### Grid can now support different page options for pdf export

Page options for pdf export lets you change the default settings(layout: 'portrait', paperSize: 'a4') for pdf pages.

Example

```svelte
<script>
	import Grid from '$lib/grid/Grid2.0.svelte';
	import { dataSource } from '$lib/dataSource';

	const columns = [
		{ field: 'OrderID', width: '200', textAlign: 'Right' },
		{ field: 'ShipCountry', width: '200' },
		{ field: 'ShipAddress', width: '150' },
		{ field: 'ShipName', width: '150' },
		{ field: 'ShipCity', width: '150' },
		{ field: 'ShipRegion', width: '150' },
		{ field: 'ShipPostalCode', width: '150' },
		{ field: 'OrderDate', width: '150' },
		{ field: 'Verified', width: '150' }
	];
</script>

<div class="mx-8 mt-8">
	<Grid
		{columns}
		{dataSource}
		pageSettings={{ pageNumber: 10 }}
		enableSearch
		enablePdfExport
		pdfOptions={{ layout: 'portrait', paperSize: 'a3' }}
	/>
</div>
```

pdfOptions:

- layout : "portrait" | "landscape"
- paperSize: 'a3' | 'a4' | 'letter' | 'legal' | 'tabloid' | 'statement' | 'executive'

